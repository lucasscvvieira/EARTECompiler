
%token	IDENTIFIER STRING_LITERAL
%token  I_CONSTANT F_CONSTANT
%token	LEFT_OP RIGHT_OP LE_OP GE_OP EQ_OP NE_OP
%token	AND_OP OR_OP MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN ADD_ASSIGN
%token	SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN
%token	XOR_ASSIGN OR_ASSIGN
%token	CHAR INT FLOAT VOID

%token	IF ELSE LPAR RPAR WHILE DO FOR RETURN BREAK

%precedence RPAR
%precedence ELSE

%start translation_unit
%%

primary_expression
	: IDENTIFIER 			
	| I_CONSTANT			
	| F_CONSTANT			
	| STRING_LITERAL		
	| LPAR expression RPAR	
	;

postfix_expression
	: primary_expression 
	| primary_expression '[' expression ']'

	| IDENTIFIER LPAR function_call 

	| LPAR type_specifier RPAR '{' initializer_list '}' 
	| LPAR type_specifier RPAR '{' initializer_list ',' '}' 
	;

function_call
	: RPAR							
	| argument_expression_list RPAR 
	;

argument_expression_list
	: assignment_expression									
	| argument_expression_list ',' assignment_expression	
	;

cast_expression
	: postfix_expression						
	| LPAR type_specifier RPAR cast_expression	
	;

multiplicative_expression
	: cast_expression								
	| multiplicative_expression '*' cast_expression
	| multiplicative_expression '/' cast_expression
	| multiplicative_expression '%' cast_expression	
	;

additive_expression
	: multiplicative_expression							
	| additive_expression '+' multiplicative_expression	
	| additive_expression '-' multiplicative_expression 
	;

shift_expression
	: additive_expression							
	| shift_expression LEFT_OP additive_expression
	| shift_expression RIGHT_OP additive_expression	
	;

relational_expression
	: shift_expression								
	| relational_expression '<' shift_expression	
	| relational_expression '>' shift_expression	
	| relational_expression LE_OP shift_expression	
	| relational_expression GE_OP shift_expression	
	;

equality_expression
	: relational_expression								
	| equality_expression EQ_OP relational_expression 
	| equality_expression NE_OP relational_expression 	
	;

and_expression
	: equality_expression						
	| and_expression '&' equality_expression	
	;

exclusive_or_expression
	: and_expression								
	| exclusive_or_expression '^' and_expression	
	;

inclusive_or_expression
	: exclusive_or_expression								
	| inclusive_or_expression '|' exclusive_or_expression	
	;

logical_and_expression
	: inclusive_or_expression								
	| logical_and_expression AND_OP inclusive_or_expression	
	;

logical_or_expression
	: logical_and_expression								
	| logical_or_expression OR_OP logical_and_expression	
	;

assignment_expression
	: logical_or_expression											
	| postfix_expression assignment_operator assignment_expression	
	;

assignment_operator
	: '='				
	| MUL_ASSIGN		
	| DIV_ASSIGN		
	| MOD_ASSIGN		
	| ADD_ASSIGN		
	| SUB_ASSIGN		
	| LEFT_ASSIGN		
	| RIGHT_ASSIGN		
	| AND_ASSIGN		
	| XOR_ASSIGN		
	| OR_ASSIGN			
	;

expression
	: assignment_expression					
	| expression ',' assignment_expression	
	;

init_declarator_list
	: init_declarator								
	| init_declarator_list ',' init_declarator		
	;

init_declarator
	: direct_declarator 
	| direct_declarator '=' initializer 
	;

type_specifier
	: CHAR	
	| INT	
	| FLOAT	
	| VOID	
	;

direct_declarator
	: IDENTIFIER					
	| LPAR direct_declarator RPAR	
	| direct_declarator '[' direct_declarator_array		
	| direct_declarator LPAR function_declaration	
	;

direct_declarator_array
	: ']'						
	| '*' ']'					
	| assignment_expression ']'	
	;

function_declaration
	: RPAR					
	| parameter_list RPAR	
	;

parameter_list
	: type_specifier direct_parameter_declarator					
	| parameter_list ',' type_specifier direct_parameter_declarator	
	;

direct_parameter_declarator
	: IDENTIFIER							
	| LPAR direct_parameter_declarator RPAR 

	| direct_parameter_declarator '[' 
		direct_declarator_array				
	;

initializer
	: '{' initializer_list '}'	
	| assignment_expression		
	;

initializer_list
	: assignment_expression							
	| initializer_list ',' assignment_expression	
	;


statement
	: compound_statement	
	| expression_statement	
	| selection_statement	
	| iteration_statement	
	| jump_statement		
	;

compound_statement
	: '{' '}'					
	| '{' block_item_list '}'	
	;

block_item_list
	: block_item					
	| block_item_list block_item	
	;

block_item
	: type_specifier init_declarator_list ';'	
	| statement									
	;

expression_statement
	: ';'				
	| expression ';'	
	;

selection_statement
	: IF LPAR expression RPAR statement ELSE statement	
	| IF LPAR expression RPAR statement					
	;

iteration_statement
	: WHILE LPAR expression RPAR statement			
	| DO statement WHILE LPAR expression RPAR ';'	
	| FOR LPAR expression_statement expression_statement RPAR statement	
	| FOR LPAR expression_statement expression_statement expression RPAR statement	
	| FOR LPAR type_specifier init_declarator_list ';' expression_statement RPAR statement	
	| FOR LPAR type_specifier init_declarator_list ';' expression_statement expression RPAR statement	
	;

jump_statement
	: RETURN ';' 			
	| RETURN expression ';' 
	| BREAK ';'				
	;

start_program
	: translation_unit 

translation_unit
	: external_declaration 					
	| translation_unit external_declaration	
	;

external_declaration
	: function_definition	
	| type_specifier init_declarator_list ';'			
	;

function_definition
	: type_specifier direct_declarator 
		function_definition_aux 
	;

function_definition_aux
	: declaration_list compound_statement	
	| compound_statement					
	;

declaration_list
	: type_specifier init_declarator_list ';'					
	| declaration_list type_specifier init_declarator_list ';'	
	;

%%
